name: Build Podcast from YouTube Playlist

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies (latest yt-dlp nightly)
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
          pip install --upgrade --force-reinstall "yt-dlp @ https://github.com/yt-dlp/yt-dlp/archive/master.tar.gz"

      - name: Validate required secrets
        env:
          YOUTUBE_PLAYLIST_URL: ${{ secrets.YOUTUBE_PLAYLIST_URL }}
          PODCAST_TITLE: ${{ secrets.PODCAST_TITLE }}
          PODCAST_AUTHOR: ${{ secrets.PODCAST_AUTHOR }}
          PODCAST_DESCRIPTION: ${{ secrets.PODCAST_DESCRIPTION }}
          PODCAST_OWNER_EMAIL: ${{ secrets.PODCAST_OWNER_EMAIL }}
          PODCAST_CATEGORY: ${{ secrets.PODCAST_CATEGORY }}
        run: |
          set -e
          for v in YOUTUBE_PLAYLIST_URL PODCAST_TITLE PODCAST_AUTHOR PODCAST_DESCRIPTION PODCAST_OWNER_EMAIL PODCAST_CATEGORY; do
            if [ -z "${!v}" ]; then
              echo "::error::Missing $v"
              exit 1
            fi
            echo "✓ $v present"
          done

      - name: Create cookies.txt if provided
        env:
          YT_COOKIES_TXT: ${{ secrets.YT_COOKIES_TXT }}
        run: |
          if [ -n "$YT_COOKIES_TXT" ]; then
            printf '%s' "$YT_COOKIES_TXT" > cookies.txt
            chmod 600 cookies.txt
            echo "✓ cookies.txt created"
          else
            echo "No cookies provided — proceeding without"
          fi

      - name: Download YouTube Playlist as MP3
        env:
          YOUTUBE_PLAYLIST_URL: ${{ secrets.YOUTUBE_PLAYLIST_URL }}
        run: |
          set +e
          mkdir -p downloads
          if [ -f cookies.txt ]; then
            COOKIES_FLAG="--cookies cookies.txt"
          else
            COOKIES_FLAG=""
          fi
          yt-dlp \
            --yes-playlist \
            --ignore-errors \
            --ignore-no-formats-error \
            --no-abort-on-error \
            --retries infinite \
            --fragment-retries infinite \
            --continue \
            --extract-audio \
            --audio-format mp3 \
            --audio-quality 0 \
            --embed-thumbnail \
            --add-metadata \
            -o "downloads/%(title)s.%(ext)s" \
            $COOKIES_FLAG \
            "$YOUTUBE_PLAYLIST_URL"
          EC=$?
          if [ $EC -ne 0 ]; then
            echo "⚠️ Some videos failed to download (exit $EC), continuing."
          fi
          exit 0

      - name: Debug: list downloaded MP3s
        run: |
          echo "MP3 files in downloads/:"
          ls -lh downloads || echo "No downloads directory found"

      - name: Fail if no MP3s found
        shell: bash
        run: |
          shopt -s nullglob
          files=(downloads/*.mp3)
          if [ ${#files[@]} -eq 0 ]; then
            echo "::error::No MP3 files found. Check the YouTube download step logs."
            exit 1
          fi

      - name: Build RSS feed
        env:
          PODCAST_TITLE: ${{ secrets.PODCAST_TITLE }}
          PODCAST_AUTHOR: ${{ secrets.PODCAST_AUTHOR }}
          PODCAST_DESCRIPTION: ${{ secrets.PODCAST_DESCRIPTION }}
          PODCAST_OWNER_EMAIL: ${{ secrets.PODCAST_OWNER_EMAIL }}
          PODCAST_CATEGORY: ${{ secrets.PODCAST_CATEGORY }}
        run: python scripts/build_feed.py

      - name: Prepare Pages artifact
        run: |
          mkdir -p public
          if [ ! -f out/podcast.xml ]; then
            echo "::error::podcast.xml not found — check build_feed.py output path"
            exit 1
          fi
          cp out/podcast.xml public/

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
