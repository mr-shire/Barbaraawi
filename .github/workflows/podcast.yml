name: Build Podcast from YouTube Playlist (Internet Archive)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
          pip install yt-dlp

      - name: Validate required secrets
        env:
          YOUTUBE_PLAYLIST_URL: ${{ secrets.YOUTUBE_PLAYLIST_URL }}
          PODCAST_TITLE: ${{ secrets.PODCAST_TITLE }}
          PODCAST_AUTHOR: ${{ secrets.PODCAST_AUTHOR }}
          PODCAST_DESCRIPTION: ${{ secrets.PODCAST_DESCRIPTION }}
          PODCAST_OWNER_EMAIL: ${{ secrets.PODCAST_OWNER_EMAIL }}
          PODCAST_CATEGORY: ${{ secrets.PODCAST_CATEGORY }}
          IA_BUCKET_IDENTIFIER: ${{ secrets.IA_BUCKET_IDENTIFIER }}
          IA_ACCESS_KEY: ${{ secrets.IA_ACCESS_KEY }}
          IA_SECRET_KEY: ${{ secrets.IA_SECRET_KEY }}
          IA_COLLECTION: ${{ secrets.IA_COLLECTION }}
        run: |
          set -e
          for v in YOUTUBE_PLAYLIST_URL PODCAST_TITLE PODCAST_AUTHOR PODCAST_DESCRIPTION PODCAST_OWNER_EMAIL PODCAST_CATEGORY IA_BUCKET_IDENTIFIER IA_ACCESS_KEY IA_SECRET_KEY IA_COLLECTION; do
            [ -n "${!v}" ] || { echo "::error::Missing $v"; exit 1; }
            echo "✓ $v present"
          done

      - name: Create cookies.txt if provided
        env:
          YT_COOKIES_TXT: ${{ secrets.YT_COOKIES_TXT }}
        run: |
          if [ -n "$YT_COOKIES_TXT" ]; then
            echo "$YT_COOKIES_TXT" > cookies.txt
            chmod 600 cookies.txt
            echo "✓ cookies.txt created"
          else
            echo "No cookies provided — proceeding without"
          fi

      - name: Download YouTube Playlist as MP3
        env:
          YOUTUBE_PLAYLIST_URL: ${{ secrets.YOUTUBE_PLAYLIST_URL }}
        run: |
          mkdir -p downloads
          yt-dlp \
            --yes-playlist \
            --ignore-errors \
            --no-abort-on-error \
            --retries infinite \
            --fragment-retries infinite \
            --continue \
            --extract-audio \
            --audio-format mp3 \
            --audio-quality 0 \
            --embed-thumbnail \
            --add-metadata \
            $([ -f cookies.txt ] && echo "--cookies cookies.txt") \
            -o "downloads/%(title)s.%(ext)s" \
            "$YOUTUBE_PLAYLIST_URL" \
          || echo "⚠️ Some videos failed to download, but continuing..."

      - name: Debug: list downloaded MP3s
        run: |
          echo "MP3 files in downloads/:"
          ls -lh downloads || echo "No downloads directory found"

      - name: Fail if no MP3s found
        run: |
          if [ -z "$(ls -A downloads/*.mp3 2>/dev/null)" ]; then
            echo "::error::No MP3 files found. Check YouTube download step."
            exit 1
          fi

      - name: Build MP3s + Upload to IA + Generate RSS
        env:
          YOUTUBE_PLAYLIST_URL: ${{ secrets.YOUTUBE_PLAYLIST_URL }}
          PODCAST_TITLE: ${{ secrets.PODCAST_TITLE }}
          PODCAST_AUTHOR: ${{ secrets.PODCAST_AUTHOR }}
          PODCAST_DESCRIPTION: ${{ secrets.PODCAST_DESCRIPTION }}
          PODCAST_OWNER_EMAIL: ${{ secrets.PODCAST_OWNER_EMAIL }}
          PODCAST_CATEGORY: ${{ secrets.PODCAST_CATEGORY }}
          IA_BUCKET_IDENTIFIER: ${{ secrets.IA_BUCKET_IDENTIFIER }}
          IA_ACCESS_KEY: ${{ secrets.IA_ACCESS_KEY }}
          IA_SECRET_KEY: ${{ secrets.IA_SECRET_KEY }}
          IA_COLLECTION: ${{ secrets.IA_COLLECTION }}
          IA_LICENSE_URL: ${{ secrets.IA_LICENSE_URL }}
        run: python scripts/build_feed.py

      - name: Prepare Pages artifact
        run: |
          mkdir -p public
          if [ ! -f out/podcast.xml ]; then
            echo "::error::podcast.xml not found — check build_feed.py output"
            exit 1
          fi
          cp out/podcast.xml public/

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
